{"name":"Scoreboard.js","tagline":"Easy Scoreboards","body":"# Scoreboard.js\r\n\r\nScoreboard.js is a personal project that I finally got around to make the final touches and now I'm making it public here on Github.\r\n\r\n## Why did I build it?\r\n\r\nThe main reason why I started working on Scoreboard.js was to learn Mootools (yes, Scoreboard.js i built with Mootools). Also I needed a scoreboard for a game that I'm currently coding on.\r\n\r\n## So what is it?\r\n\r\nIt's a…ehrm…HTML scoreboard widget. It's easy to create a theme, adding a sport and has a super simple api. Besides from being a widget that displays the score, time, etc…it also contains a notification thing that you can show when someone scored, got a red card or anything really.\r\n\r\n## How do I use it?\r\n\r\nFirst of all you need a template. Scoreboard.js makes use of declarative bindings to make it easy for every one to work with. So a scoreboard template is actually plain HTML with some data bindings like this:\r\n\r\n```html\r\n<article class=\"scoreboard\" id=\"scoreboard\">\r\n\t<div class=\"scores\">\r\n\t\t<span class=\"team\" data-scoreboard-bind=\"homeTeamName\"></span>\r\n\t\t<span class=\"score\">\r\n\t\t\t<span data-scoreboard-bind=\"homeTeamGoals\"></span>\r\n\t\t\t-\r\n\t\t\t<span data-scoreboard-bind=\"awayTeamGoals\"></span>\r\n\t\t</span>\r\n\t\t<span class=\"team\" data-scoreboard-bind=\"awayTeamName\"></span>\r\n\t</div>\r\n\t<span class=\"time\" data-scoreboard-bind=\"time\"></span>\r\n</article>\r\n```\r\n\r\nWith that exact markup you have the base for a fully working scoreboard with the default theme.\r\n\r\nNext some javascript to create the scoreboard.\r\n\r\n```javascript\r\nvar scoreboard = new Scoreboard();\r\n```\r\n\r\nFinally include the necessary files:\r\n\r\n```html\r\n<!-- Inside <head> -->\r\n<link rel=\"stylesheet\" href=\"source/theme.css\">\r\n\r\n<!-- Before </body> -->\r\n<script src=\"vendor/mootools.js\"></script>\r\n<script src=\"vendor/mootools-more.js\"></script>\r\n<script src=\"source/scoreboard.min.js\"></script>\r\n```\r\n\r\n## API\r\n\r\nThere is several useful API methods to call. Here is a full list:\r\n\r\n__scoreboard.set( what, value )__\r\n\r\nSet any option/setting to the given value. If the option doesn't exist, it creates it.\r\n- - -\r\n\r\n__scoreboard.get( what )__\r\n\r\nReturns the value of the given option/setting.\r\n- - -\r\n\r\n__scoreboard.startTime()__\r\n\r\nStarts the timer.\r\n- - -\r\n\r\n__scoreboard.stopTime()__\r\n\r\nStops the timer.\r\n- - -\r\n\r\n__scoreboard.resetTimer()__\r\n\r\nResets the timer to default.\r\n- - -\r\n\r\n__scoreboard.increaseTime()__\r\n\r\nAdds one second to the timer.\r\n- - -\r\n\r\n__scoreboard.decreaseTime()__\r\n\r\nRemoves one second from the timer.\r\n- - -\r\n\r\n__scoreboard.addGoal( team )__\r\n\r\nAdds 1 goal to the given team. team should be a string containing _home_ or _away_.\r\n- - -\r\n\r\n__scoreboard.removeGoal( team )__\r\n\r\nRemoves 1 goal from the given team.\r\n- - -\r\n\r\n__scoreboard.resetGoals( team )__\r\n\r\nReset goals for the given team to the default.\r\n- - -\r\n\r\n__scoreboard.toJSON()__\r\n\r\nIf you need to save the current state of the scoreboard, you can call the __toJSON()__ method. That will return all data stored in the scoreboard as JSON.\r\n- - -\r\n\r\n__scoreboard.showMessage( id, data, position )__\r\n\r\nWhen you need to show a message/notification you will call this method. First parameter is a string with the ID of the template (more on this further down). The second parameter is a object containing the data for the template. The last parameter is the position where you want the message to appear, possible values is the same as for the scoreboard (default is bottomCenter).\r\n- - -\r\n\r\n__scoreboard.hideMessage()__\r\n\r\nThis method will simply hide the currently showing message. Note that the message will automatically dissapear after 3 seconds (or based on the option _duration_).\r\n- - -\r\n\r\n__scoreboard.applyFilter( hook, function )__\r\n\r\nMore on this further down.\r\n\r\n## Events\r\n\r\nEvery method (except _get_) that you call fires a event. The event os prefixed with __on__ and the method starts with a capital letter like this:\r\n\r\n```javascript\r\nscoreboard.addEvent('onStartTime', function () {\r\n\talert('Time started!');\r\n});\r\n```\r\n\r\nMethods that you can pass parameters to returns those in the event. Take the __set__ (that is also a bit different, the event is called _change_) method:\r\n\r\n```javascript\r\nscoreboard.addEvent('change', function ( what, value ) {\r\n\talert('The option: ' + what + ' was changed to: ' + value);\r\n});\r\n```\r\n\r\nAnother example is the addGoal method that is called onScore:\r\n\r\n```javascript\r\nscoreboard.addEvent('onScore', function ( team ) {\r\n\talert(team + ' scored!');\r\n});\r\n```\r\n\r\n## Filters\r\n\r\nThere is certain filters you can use to manipulate the values in some functions. A list of available filters and a example is displayed below:\r\n\r\n__addHomeTeamGoal__\r\n- - -\r\n__addAwayTeamGoal__\r\n- - -\r\n__removeHomeTeamGoal__\r\n- - -\r\n__removeAwayTeamGoal__\r\n- - -\r\n__increaseTime__\r\n- - -\r\n__decreaseTime__\r\n\r\n### Example\r\n\r\nTo filter a value you use the _applyFilter (hook, function)_ method. The first parameter is the hook (from the list above) and the second one is the function. In the function you will be provided with the value generated from the function the filter lives in. Use it like this:\r\n\r\n```javascript\r\nscoreboard.applyFilter('addHomeTeamGoal', function ( goal ) {\r\n\t// Logic logic logic…\r\n\treturn goal + 2;\r\n});\r\n```\r\n\r\nThe function you set should always return a value. In the example we add 2 extra goals to the home team.\r\n\r\n## Options\r\n\r\nThere is several options that you can set. All options are optional though, so to get it up and running you don't need to do anything. Default value is in parentheses.\r\n\r\n__element (scoreboard)__\r\n\r\nThis is the ID of the main element.\r\n- - -\r\n\r\n__position (topCenter)__\r\n\r\nYou can let Scoreboard.js absolute position your scoreboard with the this option. Position can be one of these: topLeft topCenter topRight middle bottomLeft bottomCenter bottomRight. You can also set it to _null_ and no positioning will happen.\r\n- - -\r\n\r\n__homeTeamName (Home)__\r\n\r\nThe full home team name.\r\n- - -\r\n\r\n__awayTeamName (Away)__\r\n\r\nThe full away team name.\r\n- - -\r\n\r\n__homeTeamLogo (null)__\r\n\r\nPath to the logo for the home team.\r\n- - -\r\n\r\n__awayTeamLogo (null)__\r\n\r\nPath to the logo for the home team.\r\n- - -\r\n\r\n__homeTeamShort (null)__\r\n\r\nThree letter version of the home team name. If set to _null_ the three first letters of the full name will be used.\r\n- - -\r\n\r\n__awayTeamShort (null)__\r\n\r\nThree letter version of the away team name. If set to _null_ the three first letters of the full name will be used.\r\n- - -\r\n\r\n__homeTeamGoals (0)__\r\n\r\nDefault goals of the home team.\r\n- - -\r\n\r\n__awayTeamGoals (0)__\r\n\r\nDefault goals of the away team.\r\n- - -\r\n\r\n__secondLength (1000)__\r\n\r\nIf you want the time to go faster or slower than a second, you can set secondLength to what you want, in ms.\r\n- - -\r\n\r\n__time (00:00)__\r\n\r\nDefault time.\r\n- - -\r\n\r\n__timeDirection (up)__\r\n\r\nThe direction of the time. Set to _down_ if you want to count down instead of the normal direction which is up.\r\n\r\n__animationSpeed (300)__\r\n\r\nTime in ms for the message animation when showing/hiding.\r\n- - -\r\n\r\n__duration (3000)__\r\n\r\nHow long (in ms) the message should be visible.\r\n- - -","google":"UA-31456432-4","note":"Don't delete this file! It's used internally to help with page regeneration."}